{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",

	"injectionSelector": "L:comment.block.documentation.phpdoc.php",
	"scopeName": "text.phpdoc",
	"name": "phpdoc",

	"patterns": [
		{
			"include": "#phpdoc-variables"
		},
		{
			"include": "#php-doc-variable-types"
		},
		{
			"include": "#php-doc-templates"
		},
		{
			"include": "#php-doc-inheritance"
		}
	],

	"repository": {

		"primitive_types": {
			"match": "(callable-string|numeric-string|non-empty-string|mixed|non-falsy-string|literal-string|int-mask-of|int-mask|positive-int|negative-int|self|int|integer|string|array-key|class-string|bool|boolean|true|false|null|float|double|scalar|array|non-empty-array|list|non-empty-list|key-of|value-of|iterable|callable|resource|void|object|never|never-return|never-returns|no-return)(\\[\\])?",
			"name": "keyword.other.type.php"
		},

		"class_types": {
			"match": "((\\\\?([A-Za-z_]\\w*\\\\))*)([A-Za-z_]\\w*)",
			"captures": {
				"1": {
					"name": "support.other.namespace.php"
				},
				"4": {
					"name": "support.class.php"
				}
			}
		},

		"shaped_array_types": {
			"match": "(array){(.+)}",
			"captures": {
				"1": {
					"name": "keyword.other.type.php"
				},
				"2": {
					"patterns": [
						{
							"match": "(\\w+\\??)\\s*:",
							"captures": {
								"1": {
									"name": "source.php"
								}
							}
						},
						{
							"include": "#types"
						}
					]
				}
			}
		},

		"variable_names": {
			"match": "(\\$[A-Za-z]\\w*)\\b",
			"name": "variable.other.php"
		},

		"numbers": {
			"match": "((0(x|o|b))?[\\d_]+(\\.[\\d+_])?)",
			"name": "constant.numeric.php"
		},

		"strings": {
			"patterns": [
				{
					"match": "'(?:[^'\\\\]|\\\\.)*'",
					"name": "string.quoted.single"
				},
				{
					"match": "\"(?:[^\"\\\\]|\\\\.)*\"",
					"name": "string.quoted.double"
				}
			]
		},

		"constant_enumerations": {
			"match": "([A-Za-z_]\\w*)::(\\w+)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#primitive_types"
						},
						{
							"include": "class_types"
						}
					]
				},
				"2": {
					"name": "constant.other.class.php"
				}
			}
		},

		"literals_and_constants": {
			"patterns": [
				{
					"include": "#numbers"
				},
				{
					"include": "#strings"
				}
			]
		},

		"types": {
			"patterns": [
				{
					"include": "#constant_enumerations"
				},
				{
					"include": "#variable_names"
				},
				{
					"include": "#shaped_array_types"
				},
				{
					"include": "#primitive_types"
				},
				{
					"include": "#class_types"
				},
				{
					"include": "#literals_and_constants"
				}
			]
		},

		"phpdoc-variables": {
			"match": "(@(param|global|property(-read|-write)?))\\s+(.+)\\s+(\\.\\.\\.)?(\\$[A-Za-z_]\\w*)\\s*$",
			"captures": {
				"1": {
					"name": "keyword.other.phpdoc.php"
				},
				"4": {
					"name": "source.php",
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				"5": {
					"name": "source.php"
				},
				"6": {
					"name": "variable.other.php"
				}
			}
		},

		"php-doc-variable-types": {
			"match": "(@(var|return))\\s+(.+)$",
			"captures": {
				"1": {
					"name": "keyword.other.phpdoc.php"
				},
				"3": {
					"name": "source.php",
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},

		"php-doc-templates": {
			"match": "(?i)(@template)\\s+([a-z_]\\w*)(\\s+(of)\\s+(.+))?",
			"captures": {
				"1": {
					"name": "keyword.other.phpdoc.php"
				},
				"2": {
					"patterns": [
						{
							"include": "#class_types"
						}
					]
				},
				"4": {
					"name": "keyword.other.phpdoc.php"
				},
				"5": {
					"name": "source.php",
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},

		"php-doc-inheritance": {
			"match": "(@(extends|implements))\\s+(.+)",
			"captures": {
				"1": {
					"name": "keyword.other.phpdoc.php"
				},
				"3": {
					"name": "source.php",
					"patterns": [
						{
							"include": "#types"
						}
					]	
				}
			}
		}
	}
}